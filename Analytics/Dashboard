# Dashboard.py
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import zscore
import io
import base64
import os
import plotly.express as px
import plotly.graph_objects as go
import requests

# Set page configuration
st.set_page_config(page_title="Amazon Delivery GeoAnalytics Dashboard", layout="wide")

# Add custom CSS for styling
# ðŸŽ¨ Add custom CSS for styling
st.markdown("""
<style>
    /* General page */
    body {
        background-color: #f4f6f9;
        font-family: "Segoe UI", sans-serif;
        color: #333;
    }

    /* Main headers */
    .main-header {
        font-size: 2.5rem; 
        color: #2c3e50; 
        font-weight: bold; 
        margin-bottom: 1rem;
    }

    /* Sub headers */
    .sub-header {
        font-size: 1.5rem; 
        color: #e67e22; 
        border-bottom: 2px solid #ddd; 
        padding-bottom: 0.3rem;
        margin-top: 1.5rem;
    }

    /* Cards for metrics/info */
    .metric-card {
        background-color: #ffffff; 
        padding: 1rem; 
        border-radius: 0.8rem; 
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        text-align: center;
        margin-bottom: 1rem;
    }

    .metric-card h3 {
        font-size: 1.2rem;
        color: #2c3e50;
        margin-bottom: 0.3rem;
    }
    .metric-card p {
        font-size: 1.5rem;
        font-weight: bold;
        color: #1f77b4;
    }

    /* Sidebar */
    [data-testid="stSidebar"] {
        background-color: #ffffff;
        padding: 1rem;
        min-width: 300px;
        max-width: 300px;
        font-size: 14px;
        border-right: 1px solid #eee;
    }

    /* Dataset description box */
    .dataset-description {
        background-color: #ecf0f1; 
        padding: 1rem; 
        border-radius: 0.5rem; 
        margin-bottom: 1.5rem;
        font-size: 0.95rem;
        color: #2c3e50;
    }

    /* Highlighted features box */
    .features {
        border: solid 1px #e67e22; 
        border-radius: 8px; 
        text-align: center; 
        font-size: 13px; 
        color: #e67e22; 
        padding: 8px; 
        margin-bottom: 20px;
        background-color: #fffaf5;
    }

    /* Buttons */
    .stButton>button {
        background-color: #1f77b4; 
        color: white; 
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 6px;
        font-size: 14px;
        transition: background 0.3s ease;
    }
    .stButton>button:hover {
        background-color: #155a8a;
    }

</style>
""", unsafe_allow_html=True)


# Title and description
st.markdown('<h1 class="main-header">ðŸš— Amazon Delivery GeoAnalytics Dashboard</h1>', unsafe_allow_html=True)

# Function to load data
@st.cache_data
def load_data():
    try:
        # Load your dataset .read_csv("../Dataset/winners_f1_cleaned.csv")
        df = pd.read_csv("..Analytics/Clean_amazon_delivery.csv")
        
        return df
    except:
        st.error("Dataset not found. Please place 'Analytics/Clean_amazon_delivery.csv' in the same folder.")
        return pd.DataFrame()
        
# Load data
data = load_data()

# Sidebar for dataset describtion and filters and information
with st.sidebar:
    st.image("amazon.webp", width=250)
    with st.sidebar:
        filters_tab, about_tab = st.tabs(["Filters", "About",])

        with filters_tab:  
        #filter baed on the order date
          date_col = "Order_Date"  
          if date_col in df.columns:
          min_date = pd.to_datetime(df[date_col]).min()
          max_date = pd.to_datetime(df[date_col]).max()
          date_range = st.sidebar.date_input(
            "Select Date Range", [min_date, max_date])
    
            #filter based on the area 
            area_col = "Area"  
            if area_col in df.columns:
            Area = df[area_col].unique().tolist()
            Area_filter = st.sidebar.multiselect("Filter by Area", Area, default=Area)

    
            # Agent_Age range filter
            min_Agent_Age, max_Agent_Agee = st.slider(
            "Select Agent_Age",
            min_value=int(data['Agent_Age'].min()),
            max_value=int(data['Agent_Age'].max()),
            value=(int(data['Agent_Age'].min()), int(data['Agent_Age'].max()))
            )
            
            #AM or PM
            if "PMorAM" in df.columns:
            time_filter = st.sidebar.radio(
                "Filter by Order Time",
                options=["All", "AM (Morning Orders)", "PM (Evening Orders)"],
                index=0)
               # ========================
# Apply AM/PM Filter
# ========================
filtered_df = df.copy()

if time_filter == "AM (Morning Orders)":
    filtered_df = filtered_df[filtered_df["PMorAM"] == "AM"]
elif time_filter == "PM (Evening Orders)":
    filtered_df = filtered_df[filtered_df["PMorAM"] == "PM"]
 


            # Filter data based on selections
            filtered_data = data[
                (data['Order_Date'].isin(date_col)) &
                (data['Area'].isin(area_col)) &
            ]

# Footer
st.markdown("---")
st.markdown("Amazon Delivery Dashboard | Created with Streamlit")